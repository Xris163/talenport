create table if not exists public.companies (id uuid primary key default gen_random_uuid(),name text not null,owner_user_id uuid not null,created_at timestamptz default now());
create table if not exists public.employer_credits (company_id uuid primary key references public.companies(id) on delete cascade,balance int not null default 0,updated_at timestamptz default now());
create table if not exists public.credit_ledger (id uuid primary key default gen_random_uuid(),company_id uuid not null references public.companies(id) on delete cascade,delta int not null,reason text not null,stripe_session_id text,meta jsonb default '{}'::jsonb,created_at timestamptz default now());
do $$ begin create type job_status as enum ('draft','pending','published','closed'); exception when duplicate_object then null; end $$;
create table if not exists public.jobs (id uuid primary key default gen_random_uuid(),company_id uuid not null references public.companies(id) on delete cascade,title text not null,description text not null,location text,remote boolean default false,credit_cost int not null default 1,status job_status not null default 'draft',created_at timestamptz default now());
create or replace view public.v_company_balance as select c.id as company_id, coalesce(ec.balance,0) as balance from companies c left join employer_credits ec on ec.company_id = c.id;
create or replace function public.add_credits(p_company uuid, p_delta int, p_reason text, p_session text, p_meta jsonb) returns void language plpgsql as $$ begin insert into credit_ledger(company_id, delta, reason, stripe_session_id, meta) values (p_company, p_delta, p_reason, p_session, coalesce(p_meta,'{}'::jsonb)); insert into employer_credits(company_id, balance) values (p_company, greatest(p_delta,0)) on conflict (company_id) do update set balance = employer_credits.balance + EXCLUDED.balance, updated_at = now(); end; $$;
create or replace function public.consume_credits(p_company uuid, p_cost int, p_reason text, p_meta jsonb) returns boolean language plpgsql as $$ declare bal int; begin select balance into bal from employer_credits where company_id = p_company for update; if bal is null or bal < p_cost then return false; end if; insert into credit_ledger(company_id, delta, reason, meta) values (p_company, -p_cost, p_reason, coalesce(p_meta,'{}'::jsonb)); update employer_credits set balance = balance - p_cost, updated_at = now() where company_id = p_company; return true; end; $$;
